name: 'Docker: Publish/update release image'

on:
  push:
    paths:
      - 'pkg-rel'
      - 'ejabberd-version'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKERHUB_REPO: sando38/docker-ejabberd-multiarch
  EJABBERD_VERSION_FILE: ejabberd-version
  PKGREL_FILE: pkg-rel
  DOCKERFILE_NAME: Dockerfile

jobs:
  detect-change:
    name: Check ctr version change
    runs-on: ubuntu-latest
    outputs:
      update: ${{ steps.check_version_changed.outputs.update }}
    steps:
      -
        name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      -
        name: Compare versions between commits
        id: check_version_changed
        shell: bash
        run: |
          TAG_PKGREL=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1))
          git checkout HEAD^
          TAG_PKGREL_BASELINE=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1))
          if [[ "$TAG_PKGREL" != "$TAG_PKGREL_BASELINE" ]]
          then
            echo "update=true" >> $GITHUB_OUTPUT
          else
            echo "update=false" >> $GITHUB_OUTPUT
          fi

  build-x86-64:
    name: x86-64 - Build & publish/update release
    runs-on: ubuntu-latest
    needs: [detect-change]
    if: needs.detect-change.outputs.update == 'true'
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      -
        name: Check out repository code
        uses: actions/checkout@v3
      -
        name: Extract tag of release to be published/updated
        run: |
          echo "EJABBERD_VERSION=$(echo $(cat ${{ env.EJABBERD_VERSION_FILE }} | tail -n 1))" >> $GITHUB_ENV
          echo "TAG_PKGREL=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1))" >> $GITHUB_ENV
          echo "TAG_VERSION=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\-/ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MINOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /2' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MAJOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
      -
        name: Check out release to be published/updated
        uses: actions/checkout@v3
        with:
          ref: ${{ env.TAG_VERSION }}
#      -
#        name: Extract Dockerfile path
#        run: |
#          echo "DOCKERFILE_PATH=$(dirname $(find . -name ${{ env.DOCKERFILE_NAME }}))" >> $GITHUB_ENV
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ env.DOCKERHUB_REPO }}
          tags: |
            latest-x86-64
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-x86-64
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_VERSION }}-x86-64
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_MINOR }}-x86-64
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_MAJOR }}-x86-64
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Log in to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Log in to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          build-args: |
            VERSION=${{ env.EJABBERD_VERSION }}
            REPOSITORY=https://github.com/processone/ejabberd.git
          context: ./image/.
          file: ./image/${{ env.DOCKERFILE_NAME }}
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      -
        name: Docker meta for captcha
        id: meta-captcha
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ env.DOCKERHUB_REPO }}
          tags: |
            latest-x86-64
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-captcha-x86-64
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_VERSION }}-captcha-x86-64
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_MINOR }}-captcha-x86-64
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_MAJOR }}-captcha-x86-64
      -
        name: Build and push - captcha
        uses: docker/build-push-action@v3
        with:
          build-args: |
            VERSION=${{ env.EJABBERD_VERSION }}
            REPOSITORY=https://github.com/processone/ejabberd.git
          context: ./image/.
          file: ./image/${{ env.DOCKERFILE_NAME }}.captcha
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-captcha.outputs.tags }}
          labels: ${{ steps.meta-captcha.outputs.labels }}

  build-i386:
    name: i386 - Build & publish/update release
    runs-on: ubuntu-latest
    needs: [detect-change]
    if: needs.detect-change.outputs.update == 'true'
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      -
        name: Check out repository code
        uses: actions/checkout@v3
      -
        name: Extract tag of release to be published/updated
        run: |
          echo "EJABBERD_VERSION=$(echo $(cat ${{ env.EJABBERD_VERSION_FILE }} | tail -n 1))" >> $GITHUB_ENV
          echo "TAG_PKGREL=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1))" >> $GITHUB_ENV
          echo "TAG_VERSION=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\-/ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MINOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /2' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MAJOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
      -
        name: Check out release to be published/updated
        uses: actions/checkout@v3
        with:
          ref: ${{ env.TAG_VERSION }}
#      -
#        name: Extract Dockerfile path
#        run: |
#          echo "DOCKERFILE_PATH=$(dirname $(find . -name ${{ env.DOCKERFILE_NAME }}))" >> $GITHUB_ENV
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ env.DOCKERHUB_REPO }}
          tags: |
            latest-i386
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-i386
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_VERSION }}-i386
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_MINOR }}-i386
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_MAJOR }}-i386
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Log in to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Log in to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          build-args: |
            VERSION=${{ env.EJABBERD_VERSION }}
            REPOSITORY=https://github.com/processone/ejabberd.git
          context: ./image/.
          file: ./image/${{ env.DOCKERFILE_NAME }}
          platforms: linux/386
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      -
        name: Docker meta for captcha
        id: meta-captcha
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ env.DOCKERHUB_REPO }}
          tags: |
            latest-i386
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-captcha-i386
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_VERSION }}-captcha-i386
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_MINOR }}-captcha-i386
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_MAJOR }}-captcha-i386
      -
        name: Build and push - captcha
        uses: docker/build-push-action@v3
        with:
          build-args: |
            VERSION=${{ env.EJABBERD_VERSION }}
            REPOSITORY=https://github.com/processone/ejabberd.git
          context: ./image/.
          file: ./image/${{ env.DOCKERFILE_NAME }}.captcha
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-captcha.outputs.tags }}
          labels: ${{ steps.meta-captcha.outputs.labels }}

  build-aarch64:
    name: aarch64 - Build & publish/update release
    runs-on: ubuntu-latest
    needs: [detect-change]
    if: needs.detect-change.outputs.update == 'true'
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      -
        name: Check out repository code
        uses: actions/checkout@v3
      -
        name: Extract tag of release to be published/updated
        run: |
          echo "EJABBERD_VERSION=$(echo $(cat ${{ env.EJABBERD_VERSION_FILE }} | tail -n 1))" >> $GITHUB_ENV
          echo "TAG_PKGREL=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1))" >> $GITHUB_ENV
          echo "TAG_VERSION=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\-/ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MINOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /2' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MAJOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
      -
        name: Check out release to be published/updated
        uses: actions/checkout@v3
        with:
          ref: ${{ env.TAG_VERSION }}
#      -
#        name: Extract Dockerfile path
#        run: |
#          echo "DOCKERFILE_PATH=$(dirname $(find . -name ${{ env.DOCKERFILE_NAME }}))" >> $GITHUB_ENV
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ env.DOCKERHUB_REPO }}
          tags: |
            latest-aarch64
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-aarch64
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_VERSION }}-aarch64
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_MINOR }}-aarch64
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_MAJOR }}-aarch64
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Log in to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Log in to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          build-args: |
            VERSION=${{ env.EJABBERD_VERSION }}
            REPOSITORY=https://github.com/processone/ejabberd.git
          context: ./image/.
          file: ./image/${{ env.DOCKERFILE_NAME }}
          platforms: linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      -
        name: Docker meta for captcha
        id: meta-captcha
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ env.DOCKERHUB_REPO }}
          tags: |
            latest-aarch64
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-captcha-aarch64
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_VERSION }}-captcha-aarch64
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_MINOR }}-captcha-aarch64
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_MAJOR }}-captcha-aarch64
      -
        name: Build and push - captcha
        uses: docker/build-push-action@v3
        with:
          build-args: |
            VERSION=${{ env.EJABBERD_VERSION }}
            REPOSITORY=https://github.com/processone/ejabberd.git
          context: ./image/.
          file: ./image/${{ env.DOCKERFILE_NAME }}.captcha
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-captcha.outputs.tags }}
          labels: ${{ steps.meta-captcha.outputs.labels }}

  build-armv7:
    name: armv7 - Build & publish/update release
    runs-on: ubuntu-latest
    needs: [detect-change]
    if: needs.detect-change.outputs.update == 'true'
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      -
        name: Check out repository code
        uses: actions/checkout@v3
      -
        name: Extract tag of release to be published/updated
        run: |
          echo "EJABBERD_VERSION=$(echo $(cat ${{ env.EJABBERD_VERSION_FILE }} | tail -n 1))" >> $GITHUB_ENV
          echo "TAG_PKGREL=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1))" >> $GITHUB_ENV
          echo "TAG_VERSION=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\-/ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MINOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /2' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MAJOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
      -
        name: Check out release to be published/updated
        uses: actions/checkout@v3
        with:
          ref: ${{ env.TAG_VERSION }}
#      -
#        name: Extract Dockerfile path
#        run: |
#          echo "DOCKERFILE_PATH=$(dirname $(find . -name ${{ env.DOCKERFILE_NAME }}))" >> $GITHUB_ENV
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ env.DOCKERHUB_REPO }}
          tags: |
            latest-armv7
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-armv7
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_VERSION }}-armv7
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_MINOR }}-armv7
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_MAJOR }}-armv7
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Log in to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Log in to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          build-args: |
            VERSION=${{ env.EJABBERD_VERSION }}
            REPOSITORY=https://github.com/processone/ejabberd.git
          context: ./image/.
          file: ./image/${{ env.DOCKERFILE_NAME }}
          platforms: linux/arm/v7
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      -
        name: Docker meta for captcha
        id: meta-captcha
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ env.DOCKERHUB_REPO }}
          tags: |
            latest-armv7
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-captcha-armv7
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_VERSION }}-captcha-armv7
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_MINOR }}-captcha-armv7
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_MAJOR }}-captcha-armv7
      -
        name: Build and push - captcha
        uses: docker/build-push-action@v3
        with:
          build-args: |
            VERSION=${{ env.EJABBERD_VERSION }}
            REPOSITORY=https://github.com/processone/ejabberd.git
          context: ./image/.
          file: ./image/${{ env.DOCKERFILE_NAME }}.captcha
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-captcha.outputs.tags }}
          labels: ${{ steps.meta-captcha.outputs.labels }}

  build-armhf:
    name: armhf - Build & publish/update release
    runs-on: ubuntu-latest
    needs: [detect-change]
    if: needs.detect-change.outputs.update == 'true'
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      -
        name: Check out repository code
        uses: actions/checkout@v3
      -
        name: Extract tag of release to be published/updated
        run: |
          echo "EJABBERD_VERSION=$(echo $(cat ${{ env.EJABBERD_VERSION_FILE }} | tail -n 1))" >> $GITHUB_ENV
          echo "TAG_PKGREL=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1))" >> $GITHUB_ENV
          echo "TAG_VERSION=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\-/ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MINOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /2' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MAJOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
      -
        name: Check out release to be published/updated
        uses: actions/checkout@v3
        with:
          ref: ${{ env.TAG_VERSION }}
#      -
#        name: Extract Dockerfile path
#        run: |
#          echo "DOCKERFILE_PATH=$(dirname $(find . -name ${{ env.DOCKERFILE_NAME }}))" >> $GITHUB_ENV
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ env.DOCKERHUB_REPO }}
          tags: |
            latest-armhf
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-armhf
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_VERSION }}-armhf
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_MINOR }}-armhf
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_MAJOR }}-armhf
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Log in to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Log in to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          build-args: |
            VERSION=${{ env.EJABBERD_VERSION }}
            REPOSITORY=https://github.com/processone/ejabberd.git
          context: ./image/.
          file: ./image/${{ env.DOCKERFILE_NAME }}
          platforms: linux/arm/v6
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      -
        name: Docker meta for captcha
        id: meta-captcha
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ env.DOCKERHUB_REPO }}
          tags: |
            latest-armhf
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-captcha-armhf
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_VERSION }}-captcha-armhf
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_MINOR }}-captcha-armhf
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_MAJOR }}-captcha-armhf
      -
        name: Build and push - captcha
        uses: docker/build-push-action@v3
        with:
          build-args: |
            VERSION=${{ env.EJABBERD_VERSION }}
            REPOSITORY=https://github.com/processone/ejabberd.git
          context: ./image/.
          file: ./image/${{ env.DOCKERFILE_NAME }}.captcha
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-captcha.outputs.tags }}
          labels: ${{ steps.meta-captcha.outputs.labels }}

  build-ppc64le:
    name: ppc64le - Build & publish/update release
    runs-on: ubuntu-latest
    needs: [detect-change]
    if: needs.detect-change.outputs.update == 'true'
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      -
        name: Check out repository code
        uses: actions/checkout@v3
      -
        name: Extract tag of release to be published/updated
        run: |
          echo "EJABBERD_VERSION=$(echo $(cat ${{ env.EJABBERD_VERSION_FILE }} | tail -n 1))" >> $GITHUB_ENV
          echo "TAG_PKGREL=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1))" >> $GITHUB_ENV
          echo "TAG_VERSION=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\-/ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MINOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /2' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MAJOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
      -
        name: Check out release to be published/updated
        uses: actions/checkout@v3
        with:
          ref: ${{ env.TAG_VERSION }}
#      -
#        name: Extract Dockerfile path
#        run: |
#          echo "DOCKERFILE_PATH=$(dirname $(find . -name ${{ env.DOCKERFILE_NAME }}))" >> $GITHUB_ENV
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ env.DOCKERHUB_REPO }}
          tags: |
            latest-ppc64le
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-ppc64le
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_VERSION }}-ppc64le
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_MINOR }}-ppc64le
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_MAJOR }}-ppc64le
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Log in to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Log in to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          build-args: |
            VERSION=${{ env.EJABBERD_VERSION }}
            REPOSITORY=https://github.com/processone/ejabberd.git
          context: ./image/.
          file: ./image/${{ env.DOCKERFILE_NAME }}
          platforms: linux/ppc64le
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      -
        name: Docker meta for captcha
        id: meta-captcha
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ env.DOCKERHUB_REPO }}
          tags: |
            latest-ppc64le
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-captcha-ppc64le
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_VERSION }}-captcha-ppc64le
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_MINOR }}-captcha-ppc64le
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_MAJOR }}-captcha-ppc64le
      -
        name: Build and push - captcha
        uses: docker/build-push-action@v3
        with:
          build-args: |
            VERSION=${{ env.EJABBERD_VERSION }}
            REPOSITORY=https://github.com/processone/ejabberd.git
          context: ./image/.
          file: ./image/${{ env.DOCKERFILE_NAME }}.captcha
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-captcha.outputs.tags }}
          labels: ${{ steps.meta-captcha.outputs.labels }}

  build-s390x:
    name: s390x - Build & publish/update release
    runs-on: ubuntu-latest
    needs: [detect-change]
    if: needs.detect-change.outputs.update == 'true'
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      -
        name: Check out repository code
        uses: actions/checkout@v3
      -
        name: Extract tag of release to be published/updated
        run: |
          echo "EJABBERD_VERSION=$(echo $(cat ${{ env.EJABBERD_VERSION_FILE }} | tail -n 1))" >> $GITHUB_ENV
          echo "TAG_PKGREL=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1))" >> $GITHUB_ENV
          echo "TAG_VERSION=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\-/ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MINOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /2' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MAJOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
      -
        name: Check out release to be published/updated
        uses: actions/checkout@v3
        with:
          ref: ${{ env.TAG_VERSION }}
#      -
#        name: Extract Dockerfile path
#        run: |
#          echo "DOCKERFILE_PATH=$(dirname $(find . -name ${{ env.DOCKERFILE_NAME }}))" >> $GITHUB_ENV
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ env.DOCKERHUB_REPO }}
          tags: |
            latest-s390x
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-s390x
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_VERSION }}-s390x
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_MINOR }}-s390x
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_MAJOR }}-s390x
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Log in to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Log in to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          build-args: |
            VERSION=${{ env.EJABBERD_VERSION }}
            REPOSITORY=https://github.com/processone/ejabberd.git
          context: ./image/.
          file: ./image/${{ env.DOCKERFILE_NAME }}
          platforms: linux/s390x
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      -
        name: Docker meta for captcha
        id: meta-captcha
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ env.DOCKERHUB_REPO }}
          tags: |
            latest-s390x
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-captcha-s390x
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_VERSION }}-captcha-s390x
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_MINOR }}-captcha-s390x
            ${{ env.EJABBERD_VERSION }}-${{ env.TAG_MAJOR }}-captcha-s390x
      -
        name: Build and push - captcha
        uses: docker/build-push-action@v3
        with:
          build-args: |
            VERSION=${{ env.EJABBERD_VERSION }}
            REPOSITORY=https://github.com/processone/ejabberd.git
          context: ./image/.
          file: ./image/${{ env.DOCKERFILE_NAME }}.captcha
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-captcha.outputs.tags }}
          labels: ${{ steps.meta-captcha.outputs.labels }}

  publish-manifest:
    name: Publish image manifest
    runs-on: ubuntu-latest
    needs: [build-x86-64, build-i386, build-aarch64, build-armv7, build-armhf, build-ppc64le, build-s390x]    
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      -
        name: Check out repository code
        uses: actions/checkout@v3
      -
        name: Extract tag of release to be published/updated
        run: |
          echo "EJABBERD_VERSION=$(echo $(cat ${{ env.EJABBERD_VERSION_FILE }} | tail -n 1))" >> $GITHUB_ENV
          echo "TAG_PKGREL=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1))" >> $GITHUB_ENV
          echo "TAG_VERSION=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\-/ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MINOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /2' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "TAG_MAJOR=$(echo $(cat ${{ env.PKGREL_FILE }} | tail -n 1) | sed 's/\./ /1' | awk '{ print $1 }')" >> $GITHUB_ENV
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Log in to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Log in to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Merge and publish
        run: |
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }} \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_VERSION }} \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_MINOR }} \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_MAJOR }} \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-x86-64 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-i386 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-aarch64 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-armv7 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-armhf \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-ppc64le \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-s390x
          docker buildx imagetools create \
            --tag ${{ env.DOCKERHUB_REPO }}:latest \
            --tag ${{ env.DOCKERHUB_REPO }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }} \
            --tag ${{ env.DOCKERHUB_REPO }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_VERSION }} \
            --tag ${{ env.DOCKERHUB_REPO }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_MINOR }} \
            --tag ${{ env.DOCKERHUB_REPO }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_MAJOR }} \
              ${{ env.DOCKERHUB_REPO }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-x86-64 \
              ${{ env.DOCKERHUB_REPO }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-i386 \
              ${{ env.DOCKERHUB_REPO }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-aarch64 \
              ${{ env.DOCKERHUB_REPO }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-armv7 \
              ${{ env.DOCKERHUB_REPO }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-armhf \
              ${{ env.DOCKERHUB_REPO }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-ppc64le \
              ${{ env.DOCKERHUB_REPO }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-s390x
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-captcha \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-captcha \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_VERSION }}-captcha \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_MINOR }}-captcha \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_MAJOR }}-captcha \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-captcha-x86-64 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-captcha-i386 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-captcha-aarch64 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-captcha-armv7 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-captcha-armhf \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-captcha-ppc64le \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-captcha-s390x
          docker buildx imagetools create \
            --tag ${{ env.DOCKERHUB_REPO }}:latest-captcha \
            --tag ${{ env.DOCKERHUB_REPO }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-captcha \
            --tag ${{ env.DOCKERHUB_REPO }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_VERSION }}-captcha \
            --tag ${{ env.DOCKERHUB_REPO }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_MINOR }}-captcha \
            --tag ${{ env.DOCKERHUB_REPO }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_MAJOR }}-captcha \
              ${{ env.DOCKERHUB_REPO }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-captcha-x86-64 \
              ${{ env.DOCKERHUB_REPO }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-captcha-i386 \
              ${{ env.DOCKERHUB_REPO }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-captcha-aarch64 \
              ${{ env.DOCKERHUB_REPO }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-captcha-armv7 \
              ${{ env.DOCKERHUB_REPO }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-captcha-armhf \
              ${{ env.DOCKERHUB_REPO }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-captcha-ppc64le \
              ${{ env.DOCKERHUB_REPO }}:${{ env.EJABBERD_VERSION }}-${{ env.TAG_PKGREL }}-captcha-s390x              
